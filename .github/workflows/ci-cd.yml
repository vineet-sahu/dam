name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20.x'

jobs:
  # Backend Checks
  backend-checks:
    name: Backend - TypeScript & Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run Prettier check
      run: npm run format -- --check

    - name: Run ESLint
      run: npm run lint

    - name: TypeScript type check
      run: npx tsc --noEmit

    - name: Build application
      run: npm run build

    - name: Security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

  # Frontend Checks
  frontend-checks:
    name: Frontend - TypeScript & Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run Prettier check
      run: npm run prettier:check

    - name: Run ESLint
      run: npm run lint

    - name: TypeScript type check
      run: npx tsc -b --noEmit

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production

    - name: Security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist
        retention-days: 7

  # Root-level linting with lint-staged
  root-lint:
    name: Root - Lint Staged Files
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install root dependencies
      run: npm ci

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v44
      with:
        files: |
          frontend/**/*.{ts,tsx}
          backend/**/*.{ts,tsx}

    - name: Run lint-staged on changed files
      if: steps.changed-files.outputs.any_changed == 'true'
      run: npx lint-staged

  # Dependency Review
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate

  # Build and Deploy
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [backend-checks, frontend-checks]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install and build backend
      working-directory: ./backend
      run: |
        npm ci --production=false
        npm run build

    - name: Install and build frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build

    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist

    - name: Deploy to production
      run: |
        echo "Build successful! Ready for deployment."
        echo "Add your deployment commands here when ready"
        # Examples:
        # - scp -r backend/dist user@server:/var/www/backend
        # - aws s3 sync frontend/dist s3://your-bucket
        # - docker build and push
        # - Deploy to Vercel/Netlify/Heroku

    - name: Notify deployment
      if: success()
      run: |
        echo "Deployment successful!"