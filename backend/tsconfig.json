{
    "compilerOptions": {
      /* Language and Environment */
      "target": "ES2020",                          /* Set the JavaScript language version for emitted JavaScript */
      "lib": ["ES2020"],                           /* Specify a set of bundled library declaration files */
      "module": "commonjs",                        /* Specify what module code is generated */
      "moduleResolution": "node",                  /* Specify how TypeScript looks up a file from a given module specifier */

      "experimentalDecorators": true,            /* Enable experimental support for decorators */
      "emitDecoratorMetadata": true,             /* Emit design-type metadata for decorated declarations in source files */
      
      /* Emit */
      "outDir": "./dist",                          /* Specify an output folder for all emitted files */
      "rootDir": "./src",                          /* Specify the root folder within your source files */
      "removeComments": true,                      /* Disable emitting comments */
      "sourceMap": true,                           /* Create source map files for emitted JavaScript files */
      
      /* Interop Constraints */
      "esModuleInterop": true,                     /* Emit additional JavaScript to ease support for importing CommonJS modules */
      "forceConsistentCasingInFileNames": true,    /* Ensure that casing is correct in imports */
      "allowSyntheticDefaultImports": true,        /* Allow 'import x from y' when a module doesn't have a default export */
      
      /* Type Checking */
      "strict": true,                              /* Enable all strict type-checking options */
      "noImplicitAny": true,                       /* Enable error reporting for expressions and declarations with an implied 'any' type */
      "strictNullChecks": true,                    /* When type checking, take into account 'null' and 'undefined' */
      "strictFunctionTypes": true,                 /* When assigning functions, check to ensure parameters and the return values are subtype-compatible */
      "strictPropertyInitialization": true,        /* Check for class properties that are declared but not set in the constructor */
      "noUnusedLocals": true,                      /* Enable error reporting when local variables aren't read */
      "noUnusedParameters": true,                  /* Raise an error when a function parameter isn't read */
      "noImplicitReturns": true,                   /* Enable error reporting for codepaths that do not explicitly return in a function */
      "noFallthroughCasesInSwitch": true,          /* Enable error reporting for fallthrough cases in switch statements */
      
      /* Completeness */
      "skipLibCheck": true,                        /* Skip type checking all .d.ts files */
      
      /* Type Definitions */
      "typeRoots": ["./node_modules/@types", "./src/types"],  /* Specify multiple folders that act like './node_modules/@types' */
      "types": ["node"],                           /* Specify type package names to be included without being referenced in a source file */
      
      /* Advanced */
      "resolveJsonModule": true                    /* Enable importing .json files */
    },
    "ts-node": {
      "transpileOnly": true,
      "files": true
    },
    "include": [
      "src/**/*"                                   /* Include all files in src directory */
    ],
    "exclude": [
      "node_modules",                              /* Exclude node_modules */
      "dist",                                      /* Exclude build output */
      "**/*.spec.ts",                              /* Exclude test files */
      "**/*.test.ts"                               /* Exclude test files */
    ]
  }