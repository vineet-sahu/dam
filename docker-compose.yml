version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dam-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-dam}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"  # ✅ External:5433 -> Internal:5432
    networks:
      - dam-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for BullMQ
  redis:
    image: redis:7-alpine
    container_name: dam-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"  # ✅ FIXED: External:6380 -> Internal:6379 (avoid conflict with local Redis)
    networks:
      - dam-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: dam-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - dam-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Backend API Service
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    container_name: dam-api
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000  # ✅ Internal port that app listens on
      
      # Database - INTERNAL container port (not the host port!)
      DB_HOST: postgres
      DB_PORT: 5432  # ✅ FIXED: Must be 5432 (internal port inside docker network)
      DB_NAME: ${POSTGRES_DB:-dam}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-password}
      
      # Redis - INTERNAL container port (not the host port!)
      REDIS_HOST: redis
      REDIS_PORT: 6379  # ✅ Already correct: Must be 6379 (internal port inside docker network)
      
      # MinIO
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_USE_SSL: "false"
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_BUCKET_ORIGINALS: originals
      MINIO_BUCKET_THUMBNAILS: thumbnails
      MINIO_BUCKET_TRANSCODED: transcoded
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      
      # File Upload
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-524288000}
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "3004:3000"  # ✅ FIXED: External:3004 -> Internal:3000 (matches PORT env var)
    networks:
      - dam-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped

  # Worker Service (Asset Processor)
  worker:
    build:
      context: ./workers
      dockerfile: Dockerfile.worker
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      
      # Database - INTERNAL container port (not the host port!)
      DB_HOST: postgres
      DB_PORT: 5432  # ✅ FIXED: Must be 5432 (internal port inside docker network)
      DB_NAME: ${POSTGRES_DB:-dam}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-password}
      
      # Redis - INTERNAL container port (not the host port!)
      REDIS_HOST: redis
      REDIS_PORT: 6379  # ✅ Already correct: Must be 6379 (internal port inside docker network)
      
      # MinIO
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_USE_SSL: "false"
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_BUCKET_ORIGINALS: originals
      MINIO_BUCKET_THUMBNAILS: thumbnails
      MINIO_BUCKET_TRANSCODED: transcoded
      
      # Worker Configuration
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-5}
    volumes:
      - ./workers:/app
      - /app/node_modules
    networks:
      - dam-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped

  # BullMQ Dashboard (Bull Board)
  bull-board:
    build:
      context: ./backend
      dockerfile: Dockerfile.dashboard
    container_name: dam-bull-board
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379  # ✅ Already correct
      PORT: 3001  # ✅ Internal port that app listens on
    ports:
      - "3005:3001"  # ✅ FIXED: External:3005 -> Internal:3001 (matches PORT env var)
    networks:
      - dam-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
      args:
        VITE_DAM_API_BASE_URL: ${VITE_DAM_API_BASE_URL:-http://localhost:3004/api}
    container_name: dam-frontend
    ports:
      - "5174:80"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - dam-network
    depends_on:
      - api
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: dam-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - dam-network
    depends_on:
      - api
      - frontend
    restart: unless-stopped
    profiles:
      - production

networks:
  dam-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data: